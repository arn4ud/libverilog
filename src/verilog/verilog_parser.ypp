/*
 * Copyright 2019 The libverilog Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%require "3.2"
%skeleton "lalr1.cc"
%code requires {
#include "verilog_reader.h"

namespace verilog {

class VerilogLexer;
class VerilogReader;

}  // namespace verilog
}

%{
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <utility>
#include <tuple>
  
#include "verilog_lexer.h"
#include "verilog_reader.h"

#undef yylex
#define yylex lexer.yylex
%}

%debug 
%defines 

%define api.namespace { verilog }
%define api.parser.class { VerilogParser }

%define parse.assert
%define parse.error verbose
%define api.value.type variant

%parse-param { VerilogLexer& lexer }
%parse-param { VerilogReader* reader }

%token T_ASSIGN
%token T_MODULE
%token T_ENDMODULE
%token T_INPUT
%token T_INOUT
%token T_OUTPUT
%token T_WIRE
%token T_INTEGER
%token T_PARAMETER

%token T_PSTAR "(*"
%token T_STARP "*)"

%token<std::string> T_DecNumber
%token<std::string> T_BinNumber
%token<std::string> T_OctNumber
%token<std::string> T_HexNumber
%token<std::string> T_RealNumber
%token<std::string> T_String
%token<std::string> T_SimpleIdentifier
%token<std::string> T_SystemIdentifier
%token<std::string> T_EscapedIdentifier

%%

/* A.1 Source text */

/* A.1.1 Library source text */

// library_text
//  : { library_description }
//  ;

// library_description
//  : library_declaration
//  | include_statement
//  | config_declaration
//  ;

// library_declaration
//  : "library" identifier file_path_spec [ { ',' file_path_spec } ]
//    [ "-incdir" file_path_spec { ',' file_path_spec } ] ';'
//  ;

// include_statement
//  : "include" file_path_spec ';'
//  ;

/* A.1.2 Verilog source text */

source_text
    : ..description..
    ;

..description..
    : /* empty */
    | ..description.. description
    ;

description
    : module_declaration
//  | udp_declaration
//  | config_declaration
    ;

module_declaration
    : ..attribute_instance..
      T_MODULE identifier .module_parameter_list. '(' list_of_ports ')' ';'
          ..module_item..
      T_ENDMODULE
    | ..attribute_instance..
      T_MODULE identifier .module_parameter_list. '(' .list_of_port_declarations. ')' ';'
           ..non_port_module_item..
      T_ENDMODULE
     ;

/* A.1.3 Module parameters and ports */

.module_parameter_list.
    : /* empty */
    | '#' '(' list_of_parameter_declarations ')'
    ;

.list_of_port_declarations.
    : /* empty */
    | list_of_port_declarations
    ;

list_of_port_declarations
    : port_declaration
    | list_of_port_declarations ',' port_declaration
    ;

list_of_ports
    : port
    | list_of_ports ',' port
    ;

port
    : .port_expression.
    | '.' identifier '(' .port_expression. ')'
    ;

.port_expression.
    : /* empty */
    | port_expression
    ;

port_expression
    : port_reference
    | '{' list_of_port_references '}'
    ;

list_of_port_references
    : port_reference
    | list_of_port_references ',' port_reference
    ;

port_reference
    : identifier
    | identifier '[' constant_range_expression ']'
    ;

port_declaration
    : ..attribute_instance.. inout_declaration
    | ..attribute_instance.. input_declaration
    | ..attribute_instance.. output_declaration
    ;

/* A.1.4 Module items */

..module_item..
    : /* empty */
    | ..module_item.. module_item
    ;

module_item
    : port_declaration ';'
    | non_port_module_item
    ;

module_or_generate_item
    : ..attribute_instance.. module_or_generate_item_declaration
//  | ..attribute_instance.. local_parameter_declaration ';'
//  | ..attribute_instance.. parameter_override
    | ..attribute_instance.. continuous_assign
//  | ..attribute_instance.. gate_instantiation
//  | ..attribute_instance.. udp_instantiation
    | ..attribute_instance.. module_instantiation
//  | ..attribute_instance.. initial_construct
//  | ..attribute_instance.. always_construct
//  | ..attribute_instance.. loop_generate_construct
//  | ..attribute_instance.. conditional_generate_construct
//  ;

module_or_generate_item_declaration
    : net_declaration
//  | reg_declaration
//  | integer_declaration
//  | real_declaration
//  | time_declaration
//  | realtime_declaration
//  | event_declaration
//  | genvar_declaration
//  | task_declaration
//  | function_declaration
    ;

..non_port_module_item..
    : /* empty */
    | ..non_port_module_item.. non_port_module_item
    ;

non_port_module_item
    : module_or_generate_item
//  | generate_region
//  | specify_block
//  | ..attribute_instance.. parameter_declaration ';'
//  | ..attribute_instance.. specparam_declaration
    ;

// parameter_override
//  : "defparam" list_of_defparam_assignments ';'
//  ;

/* A.1.5 Configuration source text */

// config_declaration
//  : "config" identifier ';'
//      design_statement
//      {config_rule_statement}
//    "endconfig"
//  ;

// design_statement
//  : "design" { [ identifier '.' ] identifier } ';'
//  ;

// config_rule_statement
//  : default_clause liblist_clause ';'
//  | inst_clause liblist_clause ';'
//  | inst_clause use_clause ';'
//  | cell_clause liblist_clause ';'
//  | cell_clause use_clause ';'
//  ;

// default_clause
//  : "default"
//  ;

// inst_clause
//  : "instance" inst_name
//  ;

// inst_name
//  : identifier { '.' identifier }
//  ;

// cell_clause
//  : "cell" [ identifier '.' ] identifier
//  ;

// liblist_clause
//  : "liblist" { identifier }
//  ;

// use_clause
//  : "use" [ identifier '.' ] identifier [ ":config" ]
//  ;

/* A.2 Declarations */

/* A.2.1 Declaration types */

/* A.2.1.1 Module parameter declarations */

// local_parameter_declaration
//  : "localparam" [ "signed" ] [ range ] ..param_assignment..
//  | "localparam" parameter_type ..param_assignment..
//  ;

list_of_parameter_declarations
    : parameter_declaration
    | list_of_parameter_declarations ',' parameter_declaration
    ;

parameter_declaration
    : T_PARAMETER parameter_range_or_type param_assignment
//  | T_PARAMETER parameter_range_or_type ..param_assignment..
    ;

// specparam_declaration
//  : "specparam" [ range ] list_of_specparam_assignments ';'
//  ;

parameter_range_or_type
    : T_INTEGER
//  | T_REAL
//  | T_REALTIME
//  | T_TIME
//  | .range.
//  | T_SIGNED .range.
    ;

/* A.2.1.2 Port declarations */

inout_declaration
    : T_INOUT list_of_identifiers
    | T_INOUT range list_of_identifiers
//  | T_INOUT [ net_type ] [ "signed" ] [ range ] list_of_identifiers
    ;

input_declaration
    : T_INPUT list_of_identifiers
    | T_INPUT range list_of_identifiers
//  | T_INPUT [ net_type ] [ "signed" ] [ range ] list_of_identifiers
    ;

output_declaration
    : T_OUTPUT list_of_identifiers
    | T_OUTPUT range list_of_identifiers
//  | T_OUTPUT [ net_type ] [ "signed" ] [ range ] list_of_identifiers
//  | "output" "reg" [ "signed" ] [ range ] list_of_variable_port_identifiers
//  | "output" output_variable_type list_of_variable_port_identifiers
    ;

/* A.2.1.3 Type declarations */

// event_declaration
//  : "event" list_of_identifiers ';'
//  ;

// integer_declaration
//  : "integer" list_of_identifiers ';'
//  ;

net_declaration
    : net_type list_of_net_identifiers ';'
    | net_type range list_of_net_identifiers ';'
//  | net_type [ "signed" ] [ delay3 ] list_of_net_identifiers ';'
//  | net_type [ drive_strength ] [ "signed" ] [ delay3 ] list_of_net_decl_assignments ';'
//  | net_type [ "vectored" | "scalared" ] [ "signed" ] range [ delay3 ] list_of_net_identifiers ';'
//  | net_type [ drive_strength ] [ "vectored" | "scalared" ] [ "signed" ] range [ delay3 ] list_of_net_decl_assignments ';'
//  | "trireg" [ charge_strength ] [ "signed" ] [ delay3 ] list_of_net_identifiers ';'
//  | "trireg" [ drive_strength ] [ "signed" ] [ delay3 ] list_of_net_decl_assignments ';'
//  | "trireg" [ charge_strength ] [ "vectored" | "scalared" ] [ "signed" ] range [ delay3 ] list_of_net_identifiers ';'
//  | "trireg" [ drive_strength ] [ "vectored" | "scalared" ] [ "signed" ] range [ delay3 ] list_of_net_decl_assignments ';'
//  ;

// real_declaration
//  : "real" list_of_identifiers ';'
//  ;

// realtime_declaration
//  : "realtime" list_of_identifiers ';'
//  ;

// reg_declaration
//  : "reg" [ "signed" ] [ range ] list_of_identifiers ';'
//  ;

// time_declaration
//  : "time" list_of_identifiers ';'
//  ;

/* A.2.2 Declaration data types */

/* A.2.2.1 Net and variable types */

net_type
//  : "supply0"
//  | "supply1"
//  | "tri"
//  | "triand"
//  | "trior"
//  | "tri0"
//  | "tri1"
//  | "uwire"
    : T_WIRE
//  | "wand"
//  | "wor"
    ;

// output_variable_type
//  : "integer"
//  | "time"
//  ;

// real_type
//  : identifier { dimension }
//  | identifier '=' constant_expression
//  ;

// variable_type
//  : identifier { dimension }
//  | identifier '=' constant_expression
//  ;

/* A.2.2.2 Strengths */

// drive_strength
//  : '(' strength0 ',' strength1 ')'
//  | '(' strength1 ',' strength0 ')'
//  | '(' strength0 ',' "highz1" ')'
//  | '(' strength1 ',' "highz0" ')'
//  | '(' "highz0" ',' strength1 ')'
//  | '(' "highz1" ',' strength0 ')'
//  ;

// strength0
//  : "supply0"
//  | "strong0"
//  | "pull0"
//  | "weak0"
//  ;

// strength1
//  : "supply1"
//  | "strong1"
//  | "pull1"
//  | "weak1"
//  ;

// charge_strength
//  : '(' "small" ')' | '(' "medium" ')' | '(' "large" ')'

/* A.2.2.3 Delays */

// delay3
//  : '#' delay_value
//  | '#' '(' mintypmax_expression [ ',' mintypmax_expression [ ',' mintypmax_expression ] ] ')'
//  ;

// delay2
//  : '#' delay_value
//  | '#' '(' mintypmax_expression [ ',' mintypmax_expression ] ')'
//  ;

// delay_value
//  : unsigned_number
//  | real_number
//  | identifier
//  ;

/* A.2.3 Declaration lists */

// list_of_defparam_assignments
//  : defparam_assignment { ',' defparam_assignment }
//  ;

// list_of_identifiers
//  : identifier { dimension } { ',' identifier { dimension } }
//  ;

// list_of_net_decl_assignments
//  : net_decl_assignment { ',' net_decl_assignment }
//  ;

list_of_net_identifiers
    : net_identifier
    | list_of_net_identifiers ',' net_identifier
    ;

net_identifier
    : identifier
    | identifier dimension
    ;

// ..param_assignment..
//  : param_assignment
//  | ..param_assignment.. ',' param_assignment
//  ;

list_of_identifiers
    : identifier
    | list_of_identifiers ',' identifier
    ;

// list_of_identifiers
//  : real_type { ',' real_type }
//  ;

// list_of_specparam_assignments
//  : specparam_assignment { ',' specparam_assignment }
//  ;

// list_of_identifiers
//  : variable_type { ',' variable_type }
//  ;

// list_of_variable_port_identifiers
//  : identifier [ = constant_expression ] { ',' identifier [ '=' constant_expression ] }
//  ;

/* A.2.4 Declaration assignments */

// defparam_assignment
//  : hierarchical_identifier '=' constant_mintypmax_expression
//  ;

// net_decl_assignment
//  : identifier '=' expression
//  ;

param_assignment
    : identifier '=' constant_mintypmax_expression
    ;

// specparam_assignment
//  : identifier '=' constant_mintypmax_expression
//  | pulse_control_specparam
//  ;

// pulse_control_specparam
//  : 'PATHPULSE$' '=' '(' reject_limit_value [ ',' error_limit_value ] ')'
//  | 'PATHPULSE$' specify_input_terminal_descriptor '$' specify_output_terminal_descriptor
//  '=' '(' reject_limit_value [ ',' error_limit_value ] ')'
//  ;

// error_limit_value
//  : limit_value
//  ;

// reject_limit_value
//  : limit_value
//  ;

// limit_value
//  : constant_mintypmax_expression
//  ;

/* A.2.5 Declaration ranges */

dimension
    : '[' constant_expression ':' constant_expression ']'
    ;

range
    : '[' constant_expression ':' constant_expression ']'
    ;

/* A.2.6 Function declarations */

// function_declaration
//  : "function" [ "automatic" ] [ function_range_or_type ] identifier ';'
//      function_item_declaration { function_item_declaration }
//      function_statement
//    "endfunction"
//  | "function" [ "automatic" ] [ function_range_or_type ] identifier '(' function_port_list ')' ';'
//      { block_item_declaration }
//      function_statement
//  "endfunction"
//  ;

// function_item_declaration
//  : block_item_declaration
//  | ..attribute_instance.. tf_input_declaration ';'
//  ;

// function_port_list
//  : ..attribute_instance.. tf_input_declaration { ',' ..attribute_instance.. tf_input_declaration }
//  ;

// function_range_or_type
//  : [ "signed" ] [ range ]
//  | "integer"
//  | "real"
//  | "realtime"
//  | "time"
//  ;

/* A.2.7 Task declarations */

// task_declaration
//  : "task" [ "automatic" ] identifier ';'
//      { task_item_declaration }
//      statement_or_null
//    "endtask"
//  | "task" [ "automatic" ] identifier '(' [ task_port_list ] ')' ';'
//      { block_item_declaration }
//      statement_or_null
//    "endtask"
//  ;

// task_item_declaration
//  : block_item_declaration
//  | ..attribute_instance.. tf_input_declaration ';'
//  | ..attribute_instance.. tf_output_declaration ';'
//  | ..attribute_instance.. tf_inout_declaration ';'
//  ;

// task_port_list
//  : task_port_item { ',' task_port_item }
//  ;

// task_port_item
//  : ..attribute_instance.. tf_input_declaration
//  | ..attribute_instance.. tf_output_declaration
//  | ..attribute_instance.. tf_inout_declaration
//  ;

// tf_input_declaration
//  : "input" [ "reg" ] [ "signed" ] [ range ] list_of_identifiers
//  | "input" task_port_type list_of_identifiers
//  ;

// tf_output_declaration
//  : "output" [ "reg" ] [ "signed" ] [ range ] list_of_identifiers
//  | "output" task_port_type list_of_identifiers
//  ;

// tf_inout_declaration
//  : "inout" [ "reg" ] [ "signed" ] [ range ] list_of_identifiers
//  | "inout" task_port_type list_of_identifiers
//  ;

// task_port_type
//  : "integer"
//  | "real"
//  | "realtime"
//  | "time"
//  ;

/* A.2.8 Block item declarations */

// block_item_declaration
//  : ..attribute_instance.. "reg" [ "signed" ] [ range ] list_of_block_identifiers ';'
//  | ..attribute_instance.. "integer" list_of_block_identifiers ';'
//  | ..attribute_instance.. "time" list_of_block_identifiers ';'
//  | ..attribute_instance.. "real" list_of_block_identifiers ';'
//  | ..attribute_instance.. "realtime" list_of_block_identifiers ';'
//  | ..attribute_instance.. event_declaration
//  | ..attribute_instance.. local_parameter_declaration ';'
//  | ..attribute_instance.. parameter_declaration ';'
//  ;

// list_of_block_identifiers
//  : block_variable_type { ',' block_variable_type }
//  ;

// list_of_block_identifiers
//  : block_real_type { ',' block_real_type }
//  ;

// block_variable_type
//  : identifier { dimension }
//  ;

// block_real_type
//  : identifier { dimension }
//  ;

/* A.3 Primitive instances */

/* A.3.1 Primitive instantiation and instances */

// gate_instantiation
//  : cmos_switchtype [delay3]
//      cmos_switch_instance { ',' cmos_switch_instance } ';'
//  | enable_gatetype [drive_strength] [delay3]
//      enable_gate_instance { ',' enable_gate_instance } ';'
//  | mos_switchtype [delay3]
//      mos_switch_instance { ',' mos_switch_instance } ';'
//  | n_input_gatetype [drive_strength] [delay2]
//      n_input_gate_instance { ',' n_input_gate_instance } ';'
//  | n_output_gatetype [drive_strength] [delay2]
//      n_output_gate_instance { ',' n_output_gate_instance } ';'
//  | pass_en_switchtype [delay2]
//      pass_enable_switch_instance { ',' pass_enable_switch_instance } ';'
//  | pass_switchtype
//      pass_switch_instance { ',' pass_switch_instance } ';'
//  | pulldown [pulldown_strength]
//      pull_gate_instance { ',' pull_gate_instance } ';'
//  | "pullup" [pullup_strength]
//      pull_gate_instance { ',' pull_gate_instance } ';'
//  ;

// cmos_switch_instance
//  : [ name_of_gate_instance ] ( output_terminal ',' input_terminal , ncontrol_terminal ',' pcontrol_terminal )
//  ;

// enable_gate_instance
//  : [ name_of_gate_instance ] ( output_terminal ',' input_terminal ',' enable_terminal )
//  ;

// mos_switch_instance
//  : [ name_of_gate_instance ] ( output_terminal ',' input_terminal ',' enable_terminal )
//  ;

// n_input_gate_instance
//  : [ name_of_gate_instance ] ( output_terminal ',' input_terminal { ',' input_terminal } )
//  ;

// n_output_gate_instance
//  : [ name_of_gate_instance ] ( output_terminal { ',' output_terminal } , input_terminal )
//  ;

// pass_switch_instance
//  : [ name_of_gate_instance ] ( inout_terminal ',' inout_terminal )
//  ;

// pass_enable_switch_instance
//  : [ name_of_gate_instance ] ( inout_terminal ',' inout_terminal , enable_terminal )
//  ;

// pull_gate_instance
//  : [ name_of_gate_instance ] ( output_terminal )
//  ;

// name_of_gate_instance
//  : identifier [ range ]
//  ;

/* A.3.2 Primitive strengths */

// pulldown_strength
//  : '(' strength0 ',' strength1 ')'
//  | '(' strength1 ',' strength0 ')'
//  | '(' strength0 ')'
//  ;

// pullup_strength
//  : '(' strength0 ',' strength1 ')'
//  | '(' strength1 ',' strength0 ')'
//  | '(' strength1 ')'
//  ;

/* A.3.3 Primitive terminals */

// enable_terminal
//  : expression
//  ;

// inout_terminal
//  : net_lvalue
//  ;

// input_terminal
//  : expression
//  ;

// ncontrol_terminal
//  : expression
//  ;

// output_terminal
//  : net_lvalue
//  ;

// pcontrol_terminal
//  : expression
//  ;

/* A.3.4 Primitive gate and switch types */

// cmos_switchtype
//  : "cmos"
//  | "rcmos"
//  ;

// enable_gatetype
//  : "bufif0"
//  | "bufif1"
//  | "notif0"
//  | "notif1"

// mos_switchtype
//  : "nmos"
//  | "pmos"
//  | "rnmos"
//  | "rpmos"
//  ;

// n_input_gatetype
//  : "and"
//  | "nand"
//  | "or"
//  | "nor"
//  | "xor"
//  | "xnor"
//  ;

// n_output_gatetype
//  : "buf"
//  | "not"
//  ;

// pass_en_switchtype
//  : "tranif0"
//  | "tranif1"
//  | "rtranif1"
//  | "rtranif0"
//  ;

// pass_switchtype
//  : "tran"
//  | "rtran"
//  ;

/* A.4 Module instantiation and generate construct */

/* A.4.1 Module instantiation */

module_instantiation
    : identifier .parameter_value_assignment. list_of_module_instances ';'
    ;

.parameter_value_assignment.
    : /* empty */
    | parameter_value_assignment
    ;

parameter_value_assignment
    : '#' '(' list_of_parameter_assignments ')'
    ;

list_of_parameter_assignments
    : list_of_ordered_parameter_assignments
    | list_of_named_parameter_assignments
    ;

list_of_ordered_parameter_assignments
    : expression
    | list_of_ordered_parameter_assignments ',' expression
    ;

list_of_named_parameter_assignments
    : named_parameter_assignment
    | list_of_named_parameter_assignments ',' named_parameter_assignment
    ;

named_parameter_assignment
    : '.' identifier '(' .mintypmax_expression. ')'
    ;

list_of_module_instances
    : module_instance
    | list_of_module_instances ',' module_instance
    ;

module_instance
    : name_of_module_instance '(' ')'
    | name_of_module_instance '(' list_of_port_connections ')'
    ;

name_of_module_instance
    : identifier
    | identifier range
    ;

list_of_port_connections
    : list_of_ordered_port_connections
    | list_of_named_port_connections
    ;

list_of_ordered_port_connections
    : ordered_port_connection
    | list_of_ordered_port_connections ',' ordered_port_connection
    ;

ordered_port_connection
    : ..attribute_instance.. .expression.
    ;

list_of_named_port_connections
    : named_port_connection
    | list_of_named_port_connections ',' named_port_connection
    ;

named_port_connection
    : ..attribute_instance.. '.' identifier '(' .expression. ')'
    ;

/* A.4.2 Generate construct */

// generate_region
//  : generate { module_or_generate_item } endgenerate
//  ;

// genvar_declaration
//  : genvar list_of_identifiers ';'
//  ;

// list_of_identifiers
//  : identifier { ',' identifier }
//  ;

// loop_generate_construct
//  : for ( genvar_initialization ';' genvar_expression ';' genvar_iteration )
//  generate_block
//  ;

// genvar_initialization
//  : identifier = constant_expression
//  ;

// genvar_expression
//  : genvar_primary
//  | unary_operator ..attribute_instance.. genvar_primary
//  | genvar_expression binary_operator ..attribute_instance.. genvar_expression
//  | genvar_expression ? ..attribute_instance.. genvar_expression : genvar_expression
//  ;

// genvar_iteration
//  : identifier = genvar_expression
//  ;

// genvar_primary
//  : constant_primary
//  | identifier
//  ;

// conditional_generate_construct
//  : if_generate_construct
//  | case_generate_construct
//  ;

// if_generate_construct
//  : if ( constant_expression ) generate_block_or_null
//    [ else generate_block_or_null ]
//  ;

// case_generate_construct
//  : case ( constant_expression )
//      case_generate_item { case_generate_item }
//    endcase
//  ;

// case_generate_item
//  : constant_expression { ',' constant_expression } : generate_block_or_null
//  | default [ : ] generate_block_or_null
//  ;

// generate_block
//  : module_or_generate_item
//  | begin [ : identifier ] { module_or_generate_item } end
//  ;

// generate_block_or_null
//  : generate_block
//  | ';'
//  ;

/* A.5 UDP declaration and instantiation */

/* A.5.1 UDP declaration */

// udp_declaration
//  : ..attribute_instance.. primitive identifier ( udp_port_list ) ';'
//      udp_port_declaration { udp_port_declaration }
//      udp_body
//    endprimitive
//  | ..attribute_instance.. primitive identifier ( udp_declaration_port_list ) ';'
//      udp_body
//    endprimitive
//  ;

/* A.5.2 UDP ports */

// udp_port_list
//  : identifier ',' identifier { ',' identifier }
//  ;

// udp_declaration_port_list
//  : udp_output_declaration ',' udp_input_declaration { ',' udp_input_declaration }
//  ;

// udp_port_declaration
//  : udp_output_declaration ';'
//  | udp_input_declaration ';'
//  | udp_reg_declaration ';'
//  ;

// udp_output_declaration
//  : ..attribute_instance.. output identifier
//  | ..attribute_instance.. output reg identifier [ = constant_expression ]
//  ;

// udp_input_declaration
//  : ..attribute_instance.. input list_of_identifiers
//  ;

// udp_reg_declaration
//  : ..attribute_instance.. reg identifier
//  ;

/* A.5.3 UDP body */

// udp_body
//  : combinational_body
//  | sequential_body
//  ;

// combinational_body
//  : table combinational_entry { combinational_entry } endtable
//  ;

// combinational_entry
//  : level_input_list : output_symbol ';'
//  ;

// sequential_body
//  : [ udp_initial_statement ] table sequential_entry { sequential_entry } endtable
//  ;

// udp_initial_statement
//  : initial identifier = init_val ';'
//  ;

// init_val
//  : 1'b0 | 1'b1 | 1'bx | 1'bX | 1'B0 | 1'B1 | 1'Bx | 1'BX | 1 | 0
//  ;

// sequential_entry
//  : seq_input_list : current_state : next_state ';'
//  ;

// seq_input_list
//  : level_input_list | edge_input_list
//  ;

// level_input_list
//  : level_symbol { level_symbol }
//  ;

// edge_input_list
//  : { level_symbol } edge_indicator { level_symbol }
//  ;

// edge_indicator
//  : ( level_symbol level_symbol ) | edge_symbol
//  ;

// current_state
//  : level_symbol
//  ;

// next_state
//  : output_symbol | -
//  ;

// output_symbol
//  : 0 | 1 | x | X
//  ;

// level_symbol
//  : 0 | 1 | x | X | ? | b | B
//  ;

// edge_symbol
//  : r | R | f | F | p | P | n | N | *
//  ;

/* A.5.4 UDP instantiation */

// udp_instantiation
//  : identifier [ drive_strength ] [ delay2 ] udp_instance { ',' udp_instance } ';'
//  ;

// udp_instance
//  : [ name_of_udp_instance ] ( output_terminal ',' input_terminal { ',' input_terminal } )
//  ;

// name_of_udp_instance
//  : identifier [ range ]
//  ;

/* A.6 Behavioral statements */

/* A.6.1 Continuous assignment statements */

continuous_assign
    : T_ASSIGN list_of_net_assignments ';'
//  | T_ASSIGN [ drive_strength ] [ delay3 ] list_of_net_assignments ';'
    ;

list_of_net_assignments
    : net_assignment
    | list_of_net_assignments ',' net_assignment
    ;

net_assignment
    : net_lvalue '=' expression
    ;

/* A.6.2 Procedural blocks and assignments */

// initial_construct
//  : initial statement
//  ;

// always_construct
//  : always statement
//  ;

// blocking_assignment
//  : variable_lvalue = [ delay_or_event_control ] expression
//  ;

// nonblocking_assignment
//  : variable_lvalue <= [ delay_or_event_control ] expression
//  ;

// procedural_continuous_assignments
//  : assign variable_assignment
//  | deassign variable_lvalue
//  | force variable_assignment
//  | force net_assignment
//  | release variable_lvalue
//  | release net_lvalue
//  ;

// variable_assignment
//  : variable_lvalue = expression
//  ;

/* A.6.3 Parallel and sequential blocks */

// par_block
//  : fork [ : identifier { block_item_declaration } ] { statement } join
//  ;

// seq_block
//  : begin [ : identifier { block_item_declaration } ] { statement } end
//  ;

/* A.6.4 Statements */

// statement
//  : ..attribute_instance.. blocking_assignment ';'
//  | ..attribute_instance.. case_statement
//  | ..attribute_instance.. conditional_statement
//  | ..attribute_instance.. disable_statement
//  | ..attribute_instance.. event_trigger
//  | ..attribute_instance.. loop_statement
//  | ..attribute_instance.. nonblocking_assignment ';'
//  | ..attribute_instance.. par_block
//  | ..attribute_instance.. procedural_continuous_assignments ';'
//  | ..attribute_instance.. procedural_timing_control_statement
//  | ..attribute_instance.. seq_block
//  | ..attribute_instance.. system_task_enable
//  | ..attribute_instance.. task_enable
//  | ..attribute_instance.. wait_statement
//  ;

// statement_or_null
//  : statement
//  | ..attribute_instance.. ';'
//  ;

// function_statement1
//  : statement
//  ;

/* A.6.5 Timing control statements */

// delay_control
//  : # delay_value
//  | # ( mintypmax_expression )
//  ;

// delay_or_event_control
//  : delay_control
//  | event_control
//  | repeat ( expression ) event_control
//  ;

// disable_statement
//  : disable hierarchical_identifier ';'
//  | disable hierarchical_identifier ';'
//  ;

// event_control
//  : @ hierarchical_identifier
//  | @ ( event_expression )
//  | @*
//  | @ (*/
//  ;

// event_trigger
//  : -> hierarchical_identifier { [ expression ] } ';'
//  ;

// event_expression
//  : expression
//  | posedge expression
//  | negedge expression
//  | event_expression or event_expression
//  | event_expression ',' event_expression
//  ;

// procedural_timing_control
//  : delay_control
//  | event_control
//  ;

// procedural_timing_control_statement
//  : procedural_timing_control statement_or_null
//  ;

// wait_statement
//  : wait ( expression ) statement_or_null
//  ;

/* A.6.6 Conditional statements */

// conditional_statement
//  : if ( expression )
//      statement_or_null
//    [ else statement_or_null ]
//  | if_else_if_statement
//  ;

// if_else_if_statement
//  : if ( expression ) statement_or_null
//    { else if ( expression ) statement_or_null }
//    [ else statement_or_null ]
//  ;

/* A.6.7 Case statements */

// case_statement
//  : case ( expression )
//      case_item { case_item }
//    endcase
//  | casez ( expression )
//      case_item { case_item }
//    endcase
//  | casex ( expression )
//      case_item { case_item }
//    endcase
//  ;

// case_item
//  : expression { ',' expression } : statement_or_null
//  | default [ : ] statement_or_null
//  ;

/* A.6.8 Looping statements */

// loop_statement
//  : forever statement
//  | repeat ( expression ) statement
//  | while ( expression ) statement
//  | for ( variable_assignment ';' expression ';' variable_assignment )
//      statement
//  ;

/* A.6.9 Task enable statements */

// system_task_enable
//  : system_identifier [ ( [ expression ] { ',' [ expression ] } ) ] ';'
//  ;

// task_enable
//  : hierarchical_identifier [ ( expression { ',' expression } ) ] ';'
//  ;

/* A.7 Specify section */

/* A.7.1 Specify block declaration */

// specify_block
//  : specify { specify_item } endspecify
//  ;

// specify_item
//  : specparam_declaration
//  | pulsestyle_declaration
//  | showcancelled_declaration
//  | path_declaration
//  | system_timing_check
//  ;

// pulsestyle_declaration
//  : pulsestyle_onevent list_of_path_outputs ';'
//  | pulsestyle_ondetect list_of_path_outputs ';'
//  ;

// showcancelled_declaration
//  : showcancelled list_of_path_outputs ';'
//  | noshowcancelled list_of_path_outputs ';'
//  ;

/* A.7.2 Specify path declarations */

// path_declaration
//  : simple_path_declaration ';'
//  | edge_sensitive_path_declaration ';'
//  | state_dependent_path_declaration ';'
//  ;

// simple_path_declaration
//  : parallel_path_description = path_delay_value
//  | full_path_description = path_delay_value
//  ;

// parallel_path_description
//  : ( specify_input_terminal_descriptor [ polarity_operator ] => specify_output_terminal_descriptor )
//  ;

// full_path_description
//  : ( list_of_path_inputs [ polarity_operator ] *> list_of_path_outputs )
//  ;

// list_of_path_inputs
//  : specify_input_terminal_descriptor { ',' specify_input_terminal_descriptor }
//  ;

// list_of_path_outputs
//  : specify_output_terminal_descriptor { ',' specify_output_terminal_descriptor }
//  ;

/* A.7.3 Specify block terminals */

// specify_input_terminal_descriptor
//  : input_identifier [ [ constant_range_expression ] ]
//  ;

// specify_output_terminal_descriptor
//  : output_identifier [ [ constant_range_expression ] ]
//  ;

// input_identifier
//  : identifier | identifier
//  ;

// output_identifier
//  : identifier | identifier
//  ;

/* A.7.4 Specify path delays */

// path_delay_value
//  : list_of_path_delay_expressions
//  | ( list_of_path_delay_expressions )
//  ;

// list_of_path_delay_expressions
//  : t_path_delay_expression
//  | trise_path_delay_expression ',' tfall_path_delay_expression
//  | trise_path_delay_expression ',' tfall_path_delay_expression ',' tz_path_delay_expression
//  | t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ,
//    tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression
//  | t01_path_delay_expression ',' t10_path_delay_expression ',' t0z_path_delay_expression ,
//    tz1_path_delay_expression ',' t1z_path_delay_expression ',' tz0_path_delay_expression ,
//    t0x_path_delay_expression ',' tx1_path_delay_expression ',' t1x_path_delay_expression ,
//    tx0_path_delay_expression ',' txz_path_delay_expression ',' tzx_path_delay_expression
//  ;

// t_path_delay_expression
//  : path_delay_expression
//  ;

// trise_path_delay_expression
//  : path_delay_expression
//  ;

// tfall_path_delay_expression
//  : path_delay_expression
//  ;

// tz_path_delay_expression
//  : path_delay_expression
//  ;

// t01_path_delay_expression
//  : path_delay_expression
//  ;

// t10_path_delay_expression
//  : path_delay_expression
//  ;

// t0z_path_delay_expression
//  : path_delay_expression
//  ;

// tz1_path_delay_expression
//  : path_delay_expression
//  ;

// t1z_path_delay_expression
//  : path_delay_expression
//  ;

// tz0_path_delay_expression
//  : path_delay_expression
//  ;

// t0x_path_delay_expression
//  : path_delay_expression
//  ;

// tx1_path_delay_expression
//  : path_delay_expression
//  ;

// t1x_path_delay_expression
//  : path_delay_expression
//  ;

// tx0_path_delay_expression
//  : path_delay_expression
//  ;

// txz_path_delay_expression
//  : path_delay_expression
//  ;

// tzx_path_delay_expression
//  : path_delay_expression
//  ;

// path_delay_expression
//  : constant_mintypmax_expression
//  ;

// edge_sensitive_path_declaration
//  : parallel_edge_sensitive_path_description = path_delay_value
//  | full_edge_sensitive_path_description = path_delay_value
//  ;

// parallel_edge_sensitive_path_description
//  : ( [ edge_identifier ] specify_input_terminal_descriptor =>
//    ( specify_output_terminal_descriptor [ polarity_operator ] : data_source_expression ) )
//  ;

// full_edge_sensitive_path_description
//  : ( [ edge_identifier ] list_of_path_inputs *>
//    ( list_of_path_outputs [ polarity_operator ] : data_source_expression ) )
//  ;

// data_source_expression
//  : expression
//  ;

// edge_identifier
//  : posedge | negedge
//  ;

// state_dependent_path_declaration
//  : if ( module_path_expression ) simple_path_declaration
//  | if ( module_path_expression ) edge_sensitive_path_declaration
//  | ifnone simple_path_declaration
//  ;

// polarity_operator
//  : + | -
//  ;

/* A.7.5 System timing checks */

/* A.7.5.1 System timing check commands */

// system_timing_check
//  : $setup_timing_check
//  | $hold_timing_check
//  | $setuphold_timing_check
//  | $recovery_timing_check
//  | $removal_timing_check
//  | $recrem_timing_check
//  | $skew_timing_check
//  | $timeskew_timing_check
//  | $fullskew_timing_check
//  | $period_timing_check
//  | $width_timing_check
//  | $nochange_timing_check
//  ;

// $setup_timing_check
//  : $setup ( data_event ',' reference_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $hold_timing_check
//  : $hold ( reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $setuphold_timing_check
//  : $setuphold ( reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit
//    [ ',' [ notifier ] [ ',' [ stamptime_condition ] [ ',' [ checktime_condition ]
//    [ ',' [ delayed_reference ] [ ',' [ delayed_data ] ] ] ] ] ] ) ';'
//  ;

// $recovery_timing_check
//  : $recovery ( reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $removal_timing_check
//  : $removal ( reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $recrem_timing_check
//  : $recrem ( reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit
//    [ ',' [ notifier ] [ ',' [ stamptime_condition ] [ ',' [ checktime_condition ]
//    [ ',' [ delayed_reference ] [ ',' [ delayed_data ] ] ] ] ] ] ) ';'
//  ;

// $skew_timing_check
//  : $skew ( reference_event ',' data_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $timeskew_timing_check
//  : $timeskew ( reference_event ',' data_event ',' timing_check_limit
//    [ ',' [ notifier ] [ ',' [ event_based_flag ] [ ',' [ remain_active_flag ] ] ] ] ) ';'
//  ;

// $fullskew_timing_check
//  : $fullskew ( reference_event ',' data_event ',' timing_check_limit ',' timing_check_limit
//    [ ',' [ notifier ] [ ',' [ event_based_flag ] [ ',' [ remain_active_flag ] ] ] ] ) ';'
//  ;

// $period_timing_check
//  : $period ( controlled_reference_event ',' timing_check_limit [ ',' [ notifier ] ] ) ';'
//  ;

// $width_timing_check
//  : $width ( controlled_reference_event ',' timing_check_limit
//    [ ',' threshold [ ',' notifier ] ] ) ';'
//  ;

// $nochange_timing_check
//  : $nochange ( reference_event ',' data_event ',' start_edge_offset ,
//    end_edge_offset [ ',' [ notifier ] ] ) ';'
//  ;

/* A.7.5.2 System timing check command arguments */

// checktime_condition
//  : mintypmax_expression
//  ;

// controlled_reference_event
//  : controlled_timing_check_event
//  ;

// data_event
//  : timing_check_event
//  ;

// delayed_data
//  : identifier
//  | identifier [ constant_mintypmax_expression ]
//  ;

// delayed_reference
//  : identifier
//  | identifier [ constant_mintypmax_expression ]
//  ;

// end_edge_offset
//  : mintypmax_expression
//  ;

// event_based_flag
//  : constant_expression
//  ;

// notifier
//  : identifier
//  ;

// reference_event
//  : timing_check_event
//  ;

// remain_active_flag
//  : constant_expression
//  ;

// stamptime_condition
//  : mintypmax_expression
//  ;

// start_edge_offset
//  : mintypmax_expression
//  ;

// threshold
//  : constant_expression
//  ;

// timing_check_limit
//  : expression

/* A.7.5.3 System timing check event definitions */

// timing_check_event
//  : [timing_check_event_control] specify_terminal_descriptor [ &&& timing_check_condition ]
//  ;

// controlled_timing_check_event
//  : timing_check_event_control specify_terminal_descriptor [ &&& timing_check_condition ]
//  ;

// timing_check_event_control
//  : posedge
//  | negedge
//  | edge_control_specifier
//  ;

// specify_terminal_descriptor
//  : specify_input_terminal_descriptor
//  | specify_output_terminal_descriptor
//  ;

// edge_control_specifier
//  : edge [ edge_descriptor { ',' edge_descriptor } ]

// edge_descriptor2
//  : 01
//  | 10
//  | z_or_x zero_or_one
//  | zero_or_one z_or_x
//  ;

// zero_or_one
//  : 0 | 1
//  ;

// z_or_x
//  : x | X | z | Z
//  ;

// timing_check_condition
//  : scalar_timing_check_condition
//  | ( scalar_timing_check_condition )
//  ;

// scalar_timing_check_condition
//  : expression
//  | ~ expression
//  | expression == scalar_constant
//  | expression === scalar_constant
//  | expression != scalar_constant
//  | expression !== scalar_constant
//  ;

// scalar_constant
//  : 1'b0 | 1'b1 | 1'B0 | 1'B1 | 'b0 | 'b1 | 'B0 | 'B1 | 1 | 0
//  ;

/* A.8 Expressions */

/* A.8.1 Concatenations */

concatenation
    : '{' list_of_expressions '}'
    ;

// constant_concatenation
//  : { constant_expression { ',' constant_expression } }
//  ;

// constant_multiple_concatenation
//  : { constant_expression constant_concatenation }
//  ;

// module_path_concatenation
//  : { module_path_expression { ',' module_path_expression } }
//  ;

// module_path_multiple_concatenation
//  : { constant_expression module_path_concatenation }
//  ;

// multiple_concatenation
//  : { constant_expression concatenation }
//  ;

/* A.8.2 Function calls */

// constant_function_call
//  : identifier ..attribute_instance.. ( constant_expression { ',' constant_expression } )
//  ;

// constant_system_function_call
//  : system_identifier ( constant_expression { ',' constant_expression } )
//  ;

// function_call
//  : hierarchical_identifier..attribute_instance.. ( expression { ',' expression } )
//  ;

// system_function_call
//  : system_identifier [ ( expression { ',' expression } ) ]
//  ;

/* A.8.3 Expressions */

// base_expression
//  : expression
//  ;

// conditional_expression
//  : expression1 ? ..attribute_instance.. expression2 : expression3
//  ;

// constant_base_expression
//  : constant_expression
//  ;

constant_expression
    : constant_primary
//  | unary_operator ..attribute_instance.. constant_primary
//  | constant_expression binary_operator ..attribute_instance.. constant_expression
//  | constant_expression '?' ..attribute_instance.. constant_expression ':' constant_expression
    ;

constant_mintypmax_expression
    : constant_expression
//  | constant_expression ':' constant_expression ':' constant_expression
    ;

constant_range_expression
    : constant_expression
//  | constant_expression ':' constant_expression
//  | constant_base_expression '+:' width_constant_expression
//  | constant_base_expression '-:' width_constant_expression
    ;

.expression.
    : /* empty */
    | expression
    ;

list_of_expressions
    : expression
    | list_of_expressions ',' expression
    ;

expression
    : primary
//  | unary_operator ..attribute_instance.. primary
//  | expression binary_operator ..attribute_instance.. expression
//  | conditional_expression
    ;

.mintypmax_expression.
    : /* empty */
    | mintypmax_expression
    ;

mintypmax_expression
    : expression
    | expression ':' expression ':' expression
    ;

// module_path_conditional_expression
//  : module_path_expression ? ..attribute_instance.. module_path_expression : module_path_expression
//  ;

// module_path_expression
//  : module_path_primary
//  | unary_module_path_operator ..attribute_instance.. module_path_primary
//  | module_path_expression binary_module_path_operator ..attribute_instance.. module_path_expression
//  | module_path_conditional_expression
//  ;

// module_path_mintypmax_expression
//  : module_path_expression
//  | module_path_expression : module_path_expression : module_path_expression
//  ;

range_expression
    : expression
    | constant_expression ':' constant_expression
//  | base_expression '+:' width_constant_expression
//  | base_expression '-:' width_constant_expression
    ;

// width_constant_expression
//  : constant_expression
//  ;

/* A.8.4 Primaries */

constant_primary
    : number
//  | identifier [ '[' constant_range_expression ']' ]
//  | identifier [ '[' constant_range_expression ']' ]
//  | constant_concatenation
//  | constant_multiple_concatenation
//  | constant_function_call
//  | constant_system_function_call
//  | ( constant_mintypmax_expression )
    | string
    ;

// module_path_primary
//  : number
//  | identifier
//  | module_path_concatenation
//  | module_path_multiple_concatenation
//  | function_call
//  | system_function_call
//  | ( module_path_mintypmax_expression )
//  ;

primary
    : hierarchical_identifier
    | hierarchical_identifier '[' range_expression ']'
//  | hierarchical_identifier [ { '[' expression ']' } '[' range_expression ']' ]
    | concatenation
//  | multiple_concatenation
//  | function_call
//  | system_function_call
//  | ( mintypmax_expression )
    | number
    | string
    ;

/* A.8.5 Expression left-side values */

// list_of_net_lvalues
//  : net_lvalue
//  | list_of_net_lvalues ',' net_lvalue
//  ;

net_lvalue
    : hierarchical_identifier
//  | hierarchical_identifier [ { '[' constant_expression ']' } '[ constant_range_expression ]' ]
//  | '{' list_of_net_lvalues '}'
    ;

// variable_lvalue
//  : hierarchical_identifier [ { [ expression ] } [ range_expression ] ]
//  | { variable_lvalue { ',' variable_lvalue } }
//  ;

/* A.8.6 Operators */

// unary_operator
//  : +
//  | -
//  | !
//  | ~
//  | &
//  | ~&
//  | |
//  | ~|
//  | ^
//  | ~^
//  | ^~
//  ;

// binary_operator
//  : +
//  | -
//  | *
//  | /
//  | %
//  | ==
//  | !=
//  | ===
//  | !==
//  | &&
//  | ||
//  | **
//  | <
//  | <=
//  | >
//  | >=
//  | &
//  | |
//  | ^
//  | ^~
//  | ~^
//  | >>
//  | <<
//  | >>>
//  | <<<
//  ;

// unary_module_path_operator
//  : ! | ~ | & | ~& | | | ~| | ^ | ~^ | ^~
//  ;

// binary_module_path_operator
//  : == | != | && | || | & | | | ^ | ^~ | ~^
//  ;

/* A.8.7 Numbers */

number
    : T_DecNumber
    | T_BinNumber
    | T_OctNumber
    | T_HexNumber
    | T_RealNumber
    ;

// exp
//  : e | E
//  ;

// sign
//  : + | -
//  ;

// decimal_base
//  : '[s|S]d | '[s|S]D
//  ;

// binary_base
//  : '[s|S]b | '[s|S]B
//  ;

// octal_base
//  : '[s|S]o | '[s|S]O
//  ;

// hex_base
//  : '[s|S]h | '[s|S]H
//  ;

// non_zero_decimal_digit
//  : 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
//  ;

// decimal_digit
//  : 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
//  ;

// binary_digit
//  : x_digit | z_digit | 0 | 1
//  ;

// octal_digit
//  : x_digit | z_digit | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
//  ;

// hex_digit
//  : x_digit | z_digit | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9
//  | a | b | c | d | e | f | A | B | C | D | E | F
//  ;

// x_digit
//  : x | X
//  ;

// z_digit
//  : z | Z | ?
//  ;

// non_zero_unsigned_number
//  : non_zero_decimal_digit { _ | decimal_digit}
//  ;

// unsigned_number
//  : decimal_digit { _ | decimal_digit }
//  ;

// size
//  : non_zero_unsigned_number
//  ;

// binary_value
//  : binary_digit { _ | binary_digit }
//  ;

// octal_value
//  : octal_digit { _ | octal_digit }
//  ;

// hex_value
//  : hex_digit { _ | hex_digit }
//  ;

// decimal_number
//  : unsigned_number
//  | [ size ] decimal_base unsigned_number
//  | [ size ] decimal_base x_digit { _ }
//  | [ size ] decimal_base z_digit { _ }
//  ;

// binary_number
//  : [ size ] binary_base binary_value
//  ;

// octal_number
//  : [ size ] octal_base octal_value
//  ;

// hex_number
//  : [ size ] hex_base hex_value
//  ;

// real_number
//  : unsigned_number . unsigned_number
//  | unsigned_number [ . unsigned_number ] exp [ sign ] unsigned_number
//  ;

/* A.8.8 Strings */

string
    : T_String
    ;

/* A.9 General */

/* A.9.1 Attributes */

..attribute_instance..
    : /* empty */
    | ..attribute_instance.. attribute_instance
    ;

attribute_instance
    : T_PSTAR list_of_attribute_specifications T_STARP
    ;

list_of_attribute_specifications
    : attribute_specification
    | list_of_attribute_specifications ',' attribute_specification
    ;

attribute_specification
    : identifier
    | identifier '=' constant_expression
    ;

/* A.9.2 Comments */

// comment
//  : one_line_comment
//  | block_comment
//  ;

// one_line_comment
//  : "//" comment_text '\n'
//  ;

// block_comment
//  : "/*" comment_text "*/"
//  ;

// comment_text
//  : { Any_ASCII_character }
//  ;

/* A.9.3 Identifiers */

identifier
    : simple_identifier
    | escaped_identifier
    ;

hierarchical_identifier
    : identifier
//  : { identifier [ '[' constant_expression ']' ] '.' } identifier
    ;

// [ "a-zA-Z_" ]{ [ "a-zA-Z0-9_$" ] }
simple_identifier
    : T_SimpleIdentifier
    ;

// '$' [ "a-zA-Z0-9_$" ]{ [ "a-zA-Z0-9_$" ] }
system_identifier
    : T_SystemIdentifier
    ;

// '\' {Any_ASCII_character_except_white_space} white_space
escaped_identifier
    : T_EscapedIdentifier
    ;

/* A.9.4 White space */

// white_space
//  : space | tab | newline | eof
//  ;

%%

void verilog::VerilogParser::error(const std::string& msg) {
  std::cerr << "error: " << msg  << '\n';
}
