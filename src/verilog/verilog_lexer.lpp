/*
 * Copyright 2019 The libverilog Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

%{
#include <string>
#include <variant>

#include "verilog_lexer.h"

#undef YY_DECL
#define YY_DECL \
verilog::VerilogParser::symbol_type verilog::VerilogLexer::get_token()
%}

%option c++
%option batch
%option debug
%option yylineno
%option yyclass="verilog::VerilogLexer"

%option noinput
%option nounput
%option nounistd
%option noyywrap
%option nodefault

/* A.8.7 Numbers */

UNDERSCORE		"_"
DOT			"."
EXP			"e"|"E"
SIGN			"+"|"-"

DEC_BASE		"'"[sS]?[dD]
BIN_BASE		"'"[sS]?[bB]
OCT_BASE		"'"[sS]?[oO]
HEX_BASE		"'"[sS]?[hH]

NON_ZERO_DEC_DIGIT	[1-9]
DEC_DIGIT		[0-9]
BIN_DIGIT		{X_DIGIT}|{Z_DIGIT}|[01]
OCT_DIGIT		{X_DIGIT}|{Z_DIGIT}|[0-7]
HEX_DIGIT		{X_DIGIT}|{Z_DIGIT}|[0-9a-fA-F]
X_DIGIT			"x"|"X"
Z_DIGIT			"z"|"Z"|"?"

SIZE			{NON_ZERO_DEC_DIGIT}({UNDERSCORE}|{DEC_DIGIT})*

UNSIGNED_NUMBER		{DEC_DIGIT}({UNDERSCORE}|{DEC_DIGIT})*
BIN_VALUE		{BIN_DIGIT}({UNDERSCORE}|{BIN_DIGIT})*
OCT_VALUE		{OCT_DIGIT}({UNDERSCORE}|{OCT_DIGIT})*
HEX_VALUE		{HEX_DIGIT}({UNDERSCORE}|{HEX_DIGIT})*

DEC_NUMBER		{SIZE}?{DEC_BASE}{UNSIGNED_NUMBER}
DEC_NUMBER_X        {SIZE}?{DEC_BASE}{X_DIGIT}{UNDERSCORE}*
DEC_NUMBER_Z        {SIZE}?{DEC_BASE}{Z_DIGIT}{UNDERSCORE}*

BIN_NUMBER		{SIZE}?{BIN_BASE}{BIN_VALUE}
OCT_NUMBER		{SIZE}?{OCT_BASE}{OCT_VALUE}
HEX_NUMBER		{SIZE}?{HEX_BASE}{HEX_VALUE}

REAL_NUMBER		{UNSIGNED_NUMBER}{DOT}{UNSIGNED_NUMBER}
REAL_NUMBER_E		{UNSIGNED_NUMBER}({DOT}{UNSIGNED_NUMBER})?{EXP}{SIGN}?{UNSIGNED_NUMBER}

/* A.8.8 Strings */

STRING			\"[^\"\\\n]*\"

/* A.9.3 Identifiers */

SIMPLE_IDENTIFIER	[a-zA-Z_][a-zA-Z0-9_$]*
SYSTEM_IDENTIFIER	\$[a-zA-Z0-9_$]+
ESCAPED_IDENTIFIER	\\[^ \n\r\t]*

%%

`timescale[^\n]*

<<EOF>> { return verilog::VerilogParser::make_T_END(); }

[ \f\n\r\t\v] { /* skip white spaces */ }

  /* It would be more efficient to detect the start comment marker and
     discard everything until the end marker using code. */
"//".*				/* skip one-line comments */
"/*"([^*]|"*"[^/])*"*/"		/* skip block comments. */
"/*"[^*]*[*]+([^*/][^*]*[*]+)"*/"       /* skip block comment */

"assign" { return verilog::VerilogParser::make_T_ASSIGN(); }
"module" { return verilog::VerilogParser::make_T_MODULE(); }
"endmodule" { return verilog::VerilogParser::make_T_ENDMODULE(); }
"input" { return verilog::VerilogParser::make_T_INPUT(); }
"inout" { return verilog::VerilogParser::make_T_INOUT(); }
"output" { return verilog::VerilogParser::make_T_OUTPUT(); }
"wire" { return verilog::VerilogParser::make_T_WIRE(); }
"(*" { return verilog::VerilogParser::make_T_PSTAR(); }
"*)" { return verilog::VerilogParser::make_T_STARP(); }

{UNSIGNED_NUMBER} {
    return verilog::VerilogParser::make_T_DecNumber(yytext);
}
{DEC_NUMBER} {
    return verilog::VerilogParser::make_T_DecNumber(yytext);
}
{DEC_NUMBER_X} {
    return verilog::VerilogParser::make_T_DecNumber(yytext);
}
{DEC_NUMBER_Z} {
    return verilog::VerilogParser::make_T_DecNumber(yytext);
}
{BIN_NUMBER} {
    return verilog::VerilogParser::make_T_BinNumber(yytext);
}
{OCT_NUMBER} {
    return verilog::VerilogParser::make_T_OctNumber(yytext);
}
{HEX_NUMBER} {
    return verilog::VerilogParser::make_T_HexNumber(yytext);
}
{REAL_NUMBER} {
    return verilog::VerilogParser::make_T_RealNumber(yytext);
}
{REAL_NUMBER_E} {
    return verilog::VerilogParser::make_T_RealNumber(yytext);
}

{STRING} {
    return verilog::VerilogParser::make_T_String(yytext);
}

{SIMPLE_IDENTIFIER} {
    return verilog::VerilogParser::make_T_SimpleIdentifier(yytext);
}
{ESCAPED_IDENTIFIER} {
    return verilog::VerilogParser::make_T_EscapedIdentifier(yytext);
}

"," { return verilog::VerilogParser::make_COMMA(); }
":" { return verilog::VerilogParser::make_COLON(); }
"." { return verilog::VerilogParser::make_DOT(); }
"(" { return verilog::VerilogParser::make_LPAREN(); }
")" { return verilog::VerilogParser::make_RPAREN(); }
"{" { return verilog::VerilogParser::make_LBRACE(); }
"}" { return verilog::VerilogParser::make_RBRACE(); }
"[" { return verilog::VerilogParser::make_LBRACKET(); }
"]" { return verilog::VerilogParser::make_RBRACKET(); }
";" { return verilog::VerilogParser::make_SEMICOLON(); }
"*" { return verilog::VerilogParser::make_MULT(); }
"=" { return verilog::VerilogParser::make_EQUAL(); }
"-" { return verilog::VerilogParser::make_MINUS(); }
"+" { return verilog::VerilogParser::make_PLUS(); }
"|" { return verilog::VerilogParser::make_OR(); }
"#" { return verilog::VerilogParser::make_SHARP(); } 

. {  
    std::cerr << "Failed to match : " << yytext << '\n';
}

%%
